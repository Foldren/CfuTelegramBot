from datetime import datetime
from aiofiles.os import remove
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import InlineKeyboardMarkup, Message, CallbackQuery
from cryptography.fernet import Fernet
from components.keyboards_components.generators import get_gt_url_keyb_markup
from components.texts.users.write_category_to_bd import text_end_add_mi_to_bd
from config import MEMORY_STORAGE, CHECKS_PATH, BANKS_UPRAVLYAIKA, SECRET_KEY
from microservices.sql_models_extends.category import CategoryExtend
from microservices.sql_models_extends.notify_group import NotifyGroupExtend
from microservices.sql_models_extends.user import UserExtend
from microservices.google_api.google_drive import GoogleDrive
from microservices.google_api.google_table import GoogleTable
from models import ConfirmNotification


async def get_users_keyb_names_with_checkbox(users: list, flag_name: str, flag_value: str, include_admin=False,
                                             admin_id=None):
    buttons_names = []
    buttons_callbacks = []
    for u in users:
        selected_emoji = '‚òëÔ∏è' if u[flag_name] == flag_value else ''
        if u['chat_id'] == admin_id and include_admin:
            buttons_names.append(f"{selected_emoji} –Ø")
        else:
            buttons_names.append(f"{selected_emoji} {u['fullname'].split(' ')[1]} - {u['profession']}")
        buttons_callbacks.append(u['chat_id'])
    return {'names': buttons_names, 'callbacks': buttons_callbacks}


async def get_changed_reply_keyb_with_checkbox(callback: CallbackQuery, selected_minimum_one=False):
    keyboard_markup = callback.message.reply_markup
    number_pressed_btns = 0
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ (–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)
    if selected_minimum_one:
        for i, row in enumerate(keyboard_markup.inline_keyboard):
            for k, button in enumerate(row):
                if '‚òëÔ∏è' in button.text:
                    number_pressed_btns += 1
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∂–∞—Ç—É—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫—É –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–∂–æ–∫, –ª–∏–±–æ —É–±–∏—Ä–∞–µ–º (+- –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω)
    for i, row in enumerate(keyboard_markup.inline_keyboard):
        for k, button in enumerate(row):
            if callback.data == button.callback_data:
                if '‚òëÔ∏è' in button.text and not selected_minimum_one:
                    keyboard_markup.inline_keyboard[i][k].text = button.text[2:]
                elif '‚òëÔ∏è' in button.text and selected_minimum_one:
                    if (number_pressed_btns - 1) > 0:
                        keyboard_markup.inline_keyboard[i][k].text = button.text[2:]
                    else:
                        await callback.answer()
                        break
                else:
                    keyboard_markup.inline_keyboard[i][k].text = '‚òëÔ∏è ' + button.text
                break
    return keyboard_markup


async def get_emoji_number(number):
    numbers = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]
    emoji_number = ""

    for i in range(0, len(str(number))):
        emoji_number += numbers[int(str(number)[i])]

    return emoji_number


# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –æ—á–µ—Ä–µ–¥—å—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–º –≤ —ç–º–æ–¥–∂–∏
async def get_msg_queue(level: int, selected_item_name: str = "", queue: str = "", only_queue: bool = False) -> str:
    numbers = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]
    emoji_level = ""

    if level == 0:
        if only_queue:
            return f"<u>–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å</u>:  <b>–ì–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n"
        else:
            return f"<u>–£—Ä–æ–≤–µ–Ω—å</u>: 0Ô∏è‚É£ <b>–ì–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n"
    elif level == 1:
        if only_queue:
            return f"<u>–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å</u>:  <b>{queue}</b>\n"
        else:
            return f"<u>–£—Ä–æ–≤–µ–Ω—å</u>: 1Ô∏è‚É£ <b>{selected_item_name}</b>\n"

    for i in range(0, len(str(level))):
        emoji_level += numbers[int(str(level)[i])]

    if only_queue:
        return f"<u>–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å</u>:  <b>{queue}</b>\n"
    else:
        return f"<u>–£—Ä–æ–≤–µ–Ω—å</u>: {emoji_level} <b>{selected_item_name}</b>\n" \
               f"<u>–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å</u>:  <b>{queue}</b>\n"


# –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–ª–±–µ–∫–∞
async def get_callb_content(callback_data: str, multiply_values: bool = False):
    return callback_data.split(":") if multiply_values else callback_data.split(":")[1]


# –î–æ–±–∞–≤–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
async def set_memory_data(bot_object: Bot, message: Message, data_dict: dict):
    await MEMORY_STORAGE.set_data(
        key=StorageKey(bot_id=bot_object.id, chat_id=message.chat.id, user_id=message.chat.id),
        data=data_dict
    )


# –°—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –û–ü
async def get_memory_data(bot_object: Bot, message: Message) -> dict:
    return await MEMORY_STORAGE.get_data(
        key=StorageKey(bot_id=bot_object.id, chat_id=message.chat.id, user_id=message.chat.id)
    )


async def set_memory_state(bot_object: Bot, message: Message, state: State):
    MEMORY_STORAGE.set_state(
        key=StorageKey(bot_id=bot_object.id, chat_id=message.chat.id, user_id=message.chat.id),
        state=state
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–±–µ–∫–∞
async def get_msg_user_data(msg_data: str) -> dict:
    return {
        'nickname': msg_data.split("\n")[0],
        'fullname': msg_data.split("\n")[1],
        'profession': msg_data.split("\n")[2]
    }


async def get_msg_list_data(msg_data: str) -> list:
    return msg_data.split("\n")


async def generate_zero_array(length: int):
    array_zero_str = list()

    for i in range(0, length):
        array_zero_str.append(0)

    return array_zero_str


async def generate_observers_list(users: dict):
    observers_list = list()

    for u in users:
        observers_list.append(1 if u['observer'] else 0)

    return observers_list


async def generate_wallets_status_list(wallets: list):
    wallets_status_list = list()

    for w in BANKS_UPRAVLYAIKA:
        wallets_status_list.append(1 if (w in wallets) else 0)

    return wallets_status_list


async def get_sure_delete_mi_msg(list_menu_items: list):
    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n<b>{', '.join(str(mi) for mi in list_menu_items)}</b> ‚ùì\n\n" \
           f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞ —Ç–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø—ã –∫ —ç—Ç–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ü§î‚ÄºÔ∏è"


async def get_sure_delete_org_msg(list_menu_items: list):
    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Æ–† –õ–∏—Ü–∞:\n<b>{', '.join(str(mi) for mi in list_menu_items)}</b> ‚ùì\n\n" \
           f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø—ã –∫ —ç—Ç–∏–º –Æ–† –õ–∏—Ü–∞–º, –∞ —Ç–∞–∫–∂–µ, " \
           f"–µ—Å–ª–∏ –≤—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ –±–∞–Ω–∫–∏ –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —ç—Ç–∏ –Æ–† –õ–∏—Ü–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —Å–∏—Å—Ç–µ–º–∞ " \
           f"–ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–æ —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –±–∞–Ω–∫–∞ ü§î‚ÄºÔ∏è"


async def get_sure_delete_usr_msg(list_users: list):
    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø —É:\n<b>{', '.join(str(u) for u in list_users)}</b> ‚ùì\n\n" \
           f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∞–≤–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é, " \
           f"–∞ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –±–æ—Ç—É –±—É–¥–µ—Ç –∞–Ω—É–ª–∏—Ä–æ–≤–∞–Ω ü§î‚ÄºÔ∏è"


async def get_sure_delete_partner_msg(list_partners: list):
    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤:\n<b>{', '.join(str(p) for p in list_partners)}</b> ‚ùì\n\n" \
           f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—á–µ–∑–Ω—É—Ç —Å–≤—è–∑–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –≤—ã–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç" \
           f"—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ ü§î‚ÄºÔ∏è"


async def get_sure_delete_banks_msg(list_banks: list):
    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫–∏:\n<b>{', '.join(str(b) for b in list_banks)}</b> ‚ùì\n\n" \
           f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—á–µ–∑–Ω—É—Ç —Ç–∞–∫–∂–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ —Å—á–µ—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–∏–º –±–∞–Ω–∫–∞–º, –∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –≤—ã–ø–∏—Å–æ–∫ " \
           f"—ç—Ç–∏—Ö –±–∞–Ω–∫–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ ü§î‚ÄºÔ∏è"


async def get_sure_delete_payment_account_msg(list_partners: list):
    return f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—á—ë—Ç–Ω—ã–µ —Å—á–µ—Ç–∞:\n<b>{', '.join(str(p) for p in list_partners)}</b> ‚ùì\n\n" \
           f"–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—á–µ–∑–Ω—É—Ç —Å–≤—è–∑–∏ –Æ–† –õ–∏—Ü —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–Ω—ã–º–∏ —Å—á—ë—Ç–∞–º–∏, –∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –≤—ã–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç " \
           f"–ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—á—ë—Ç–æ–≤ ü§î‚ÄºÔ∏è"


async def answer_or_edit_message(message: Message, flag_answer: bool, text: str,
                                 keyboard_markup: InlineKeyboardMarkup = None):
    if flag_answer:
        message = await message.answer(
            text=text,
            reply_markup=keyboard_markup,
            parse_mode="html"
        )
    else:
        message = await message.edit_text(
            text=text,
            reply_markup=keyboard_markup,
            parse_mode="html"
        )
    return message


async def get_current_frmt_datetime():
    return datetime.now().strftime('%Y-%m-%d&%H-%M-%S')


async def send_multiply_messages(bot: Bot, msg_text: str, list_chat_ids: list[int], keyboard_markup=None):
    for chat_id in list_chat_ids:
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=msg_text,
                parse_mode="html",
                reply_markup=keyboard_markup,
            )
        except TelegramForbiddenError:
            await NotifyGroupExtend.detach_group_from_admin(chat_id)


async def get_msg_notify_new_note_bd(fullname_worker: str, last_queue_e: str, queue: str,
                                     volume_op: str, payment_method: str, sender_is_org: bool = False):
    org_sender_txt = " –æ—Ç –∏–º–µ–Ω–∏ –Æ–† –õ–∏—Ü–∞" if sender_is_org else ""
    return f"üì≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{fullname_worker}</b>, —Ç–æ–ª—å–∫–æ —á—Ç–æ, –æ—Ñ–æ—Ä–º–∏–ª{org_sender_txt}: {last_queue_e}\n" \
           f"<u>–û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–∏</u>: <b>{queue}</b>\n" \
           f"<u>–°—É–º–º–∞</u>: <b>{volume_op}</b>\n" \
           f"<u>–ö–æ—à–µ–ª–µ–∫</u>: <b>{payment_method}</b>\n"


async def add_new_note_to_bd_handler_algorithm(message: Message, state: FSMContext, bot_object: Bot,
                                               gt_object: GoogleTable, gd_object: GoogleDrive, file_id: str = None):
    current_user = await UserExtend.get_by_id(message.chat.id)
    admin_id = await UserExtend.get_user_admin_id(message.chat.id)
    admin_info = await UserExtend.get_admin_info(admin_id)
    state_data = await state.get_data()
    gt_decr_url = Fernet(SECRET_KEY).decrypt(admin_info.google_table_url).decode("utf-8")
    gd_decr_url = Fernet(SECRET_KEY).decrypt(admin_info.google_drive_dir_url).decode("utf-8")
    keyboard_end_write = await get_gt_url_keyb_markup(gt_decr_url, gd_decr_url)
    sender_org_flag = True if state_data['sender'] == "org" else False

    message = await answer_or_edit_message(
        message=message,
        flag_answer=not sender_org_flag,
        text='–î–æ–±–∞–≤–ª—è—é –∑–∞–ø–∏—Å—å –≤ –≤–∞—à—É –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É üîÑ \n\nüü©üü©üü©‚óª‚óª‚óª‚óª‚óª‚óª‚óª'
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ google
    await gt_object.add_new_str_to_bd(
        table_encr_url=admin_info.google_table_url,
        chat_id_worker=message.chat.id,
        fullname_worker=current_user.fullname,
        volume_op=state_data['volume_operation'],
        org_op=state_data['organization_name'],
        queue_op=state_data['item_queue'],
        type_op=state_data['operation_type'],
        payment_method=state_data['payment_method'],
        sender_is_org=sender_org_flag
    )

    if file_id is not None:
        message = await message.edit_text('–°–æ—Ö—Ä–∞–Ω—è—é —á–µ–∫, –ø—Ä–æ–≤–µ—Ä—è—é –≤–∫–ª—é—á–µ–Ω –ª–∏ —è –≤ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã üßê \n\nüü©üü©üü©üü©üü©üü©‚óª‚óª‚óª‚óª')

        # –ï—Å–ª–∏ –Ω–µ —é—Ä –ª–∏—Ü–æ
        if not sender_org_flag:
            file_name = await get_current_frmt_datetime() + ".png"
            file_path = CHECKS_PATH + str(admin_id) + "/" + file_name

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç —é—Ä –ª–∏—Ü–∞
            await bot_object.download(file=file_id, destination=file_path)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É google drive –∫–ª–∏–µ–Ω—Ç–∞
            await gd_object.upload_check_too_google_drive_dir(
                file_path=file_path,
                google_dir_encr_url=admin_info.google_drive_dir_url,
                file_name_on_gd=file_name
            )

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é aiofiles
            await remove(file_path)
    else:
        message = await message.edit_text('–ü—Ä–æ–≤–µ—Ä—è—é –≤–∫–ª—é—á–µ–Ω –ª–∏ —è –≤ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã üßê \n\nüü©üü©üü©üü©üü©üü©‚óª‚óª‚óª‚óª')

    await state.clear()

    # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º –∞–¥–º–∏–Ω–∞
    check_admin_empty_groups = await NotifyGroupExtend.check_admin_groups_empty(admin_id)

    if not check_admin_empty_groups:
        message = await message.edit_text('–í–∫–ª—é—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã üì© \n\nüü©üü©üü©üü©üü©üü©üü©üü©üü©üü©')
        list_ngroups_ids = await NotifyGroupExtend.get_admin_notify_groups_chat_ids(admin_id)
        operation_name = state_data['item_queue'].split(" ‚Üí ")[-1]

        msg_in_group = await get_msg_notify_new_note_bd(
            fullname_worker=current_user.fullname,
            last_queue_e=operation_name,
            queue=state_data['item_queue'],
            volume_op=state_data['volume_operation'],
            payment_method=state_data['payment_method'],
            sender_is_org=sender_org_flag
        )

        await send_multiply_messages(
            bot=bot_object,
            msg_text=msg_in_group,
            list_chat_ids=list_ngroups_ids
        )

    await message.edit_text(text=text_end_add_mi_to_bd, reply_markup=keyboard_end_write, parse_mode="html")


async def get_str_format_queue(selected_item_id) -> str:
    menu_items_names_list = await CategoryExtend.get_parent_categories_names(selected_item_id)
    return " ‚Üí ".join(menu_items_names_list)


async def get_formatted_notifications(notifications: list[ConfirmNotification]):
    volume = ""
    comment = ""
    nickname_sender = ""

    for n in notifications:
        if n.type == 'report_request':
            rep_req = await n.report_request
            rep_req.stage
            volume = rep_req.volume
            comment = rep_req.comment
            nickname_sender = rep_req.nickname_sender

