from dataclasses import asdict, dataclass
from typing import Union, Any
import jwt
from aiogram.types import Message, CallbackQuery
from httpx import AsyncClient
from jwt import ExpiredSignatureError
from components.tools import Tool
from modules.gateway.responses.auth import SignInResponse, RefreshResponse
from modules.redis.models import User
from source.config import GATEWAY_PATH, JWT_SECRET, UA_TELEGRAM
from source.modules.gateway.requests.auth import SignInRequest


class ApiGateway:
    main_path: str = GATEWAY_PATH
    headers = {"User-Agent": UA_TELEGRAM}
    event: Union[Message, CallbackQuery]

    def __init__(self, event: Union[Message, CallbackQuery]):
        """
        –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ–º event
        :param event: –æ–±—ä–µ–∫—Ç –∫–æ–ª–±–µ–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        self.event = event

    async def __refresh(self):
        chat_id = await Tool.get_chat_id(self.event)
        message = await self.event.bot.send_message(chat_id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üîÑ")
        user = await User.find(User.chat_id == chat_id).first()

        self.headers.pop('Authorization')

        async with AsyncClient(verify=True) as async_session:
            response_token = await async_session.post(
                url=self.main_path + "/auth/refresh",
                headers=self.headers,
                cookies=user.cookies
            )

            refresh_response = await Tool.handle_exceptions(response_token, self.event, RefreshResponse)

            # –û–±–Ω–æ–≤–ª—è–µ–º access_token
            access_token = refresh_response.accessToken
            self.headers['Authorization'] = 'Bearer ' + access_token

            user.accessToken = access_token
            user.cookies = {'refresh': response_token.cookies['refresh']}
            await user.save()

        await message.delete()

    async def _request(self, method: str, url: str, response_obj, request_obj: dataclass = None,
                       data_in_url: bool = False) -> Any:
        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
        chat_id = await Tool.get_chat_id(event=self.event)
        user = await User.find(User.chat_id == chat_id).first()

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –≤ dict, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            dict_params = asdict(request_obj, dict_factory=lambda x: {k: v for (k, v) in x if v is not None})
            # C—Ç–∞–≤–∏–º —É—Å–ª–æ–≤–∏—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
            json_data = dict_params if (method == "post" or method == "patch") and not data_in_url else None
            params_data = dict_params if (method == "get" or method == "delete") and not data_in_url else None

        # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ None
        except TypeError:
            json_data = None
            params_data = None

        self.headers['Authorization'] = 'Bearer ' + user.accessToken

        async with AsyncClient(verify=False, cookies=user.cookies, headers=self.headers) as async_session:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            try:
                jwt.decode(user.accessToken, JWT_SECRET, algorithms=["HS256"])
                response = await async_session.request(
                    method=method,
                    url=self.main_path + url,
                    json=json_data,
                    params=params_data,
                )

            except ExpiredSignatureError:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ª—É—á–∞–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                await self.__refresh()

                # –°–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = await async_session.request(
                    method=method,
                    url=self.main_path + url,
                    json=json_data,
                    params=params_data,
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
            rpc_response = await Tool.handle_exceptions(response, self.event, response_obj)

        return rpc_response

    @staticmethod
    async def _get_user_id(chat_id: int):
        user = await User.find(User.chat_id == chat_id).first()
        user_data = jwt.decode(user.accessToken, JWT_SECRET, algorithms=["HS256"], options={"verify_signature": False})

        return user_data['id']

    async def auth(self, email: str, password: str) -> SignInResponse:
        async with AsyncClient(verify=False) as async_session:
            response = await async_session.post(
                url=self.main_path + "/auth/sign-in",
                headers=self.headers,
                json=asdict(SignInRequest(email, password)),
            )

        rpc_response = await Tool.handle_exceptions(response, self.event, SignInResponse)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        self.headers['Authorization'] = 'Bearer ' + rpc_response.accessToken

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await User(
            chat_id=self.event.chat.id,
            accessToken=rpc_response.accessToken,
            role=rpc_response.user.role,
            cookies=response.cookies
        ).save()

        return rpc_response
